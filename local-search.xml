<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vfs</title>
    <link href="/2024/10/02/vfs/"/>
    <url>/2024/10/02/vfs/</url>
    
    <content type="html"><![CDATA[<p>本篇文章记录一下实现一个简单的<a href="https://en.wikipedia.org/wiki/Virtual_file_system">vfs</a>，<code>vfs</code>是内核中的软件层，为用户空间程序提供文件系统接口。它还在内核中提供了一个<code>abstraction layer</code>，允许不同的文件系统实现共存。</p><p>参考图示如下<a href="https://images.squarespace-cdn.com/content/v1/5e1f51eb1bb1681137ea90b8/6cc957f9-2b62-40c0-a621-cb8137045c9a/VFS+Interface+Graphic.gif?format=2500w">1</a></p><p><img src="https://images.squarespace-cdn.com/content/v1/5e1f51eb1bb1681137ea90b8/6cc957f9-2b62-40c0-a621-cb8137045c9a/VFS+Interface+Graphic.gif?format=2500w" alt="示意图"></p><p>为了实现不同的文件系统，<code>vfs</code>需要提供一个接口，类比程序语言中的<code>多态</code>机制，不同的文件系统只需要实现这个接口，<code>vfs</code>就能以统一的方式处理用户发出的文件处理的相关的请求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat foo.txt &gt; /home/bar.txt<br>cat foo.txt &gt; /dev/tty0<br>cat foo.txt &gt; /proc/123/mem<br></code></pre></td></tr></table></figure><p>上面显示的命令非常相似，但是它们的效果截然不同，第一个命令通过文件系统将<code>foo.txt</code>的内容写入到磁盘的文件中，第二个命令通过设备文件系统将内容写入到终端，第三个命令将内容写入到进程的地址空间中。</p><p>上面的例子说明了<code>vfs</code>的功能，提供给用户一个统一的<code>API</code>接口，具体的实现由下层的文件系统负责。</p><p><strong>那么如何实现<code>vfs</code>的多态性呢？</strong></p><ul><li>虚函数</li></ul><p><a href="https://en.wikipedia.org/wiki/Virtual_function"><code>virtual function</code></a>在面向对象语言中，指的是在<code>super class</code>中定义的函数有可能被<code>sub class</code>覆盖的函数，在<code>vfs</code>中通过函数指针实现。不同的文件系统有其自己的函数实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode_ops</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/* The following functions map directly to their corresponding</span><br><span class="hljs-comment">     * system calls. Unless otherwise noted, they return 0 on</span><br><span class="hljs-comment">     * success, and -errno on failure.</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/* Operations that can be performed on non-directory files: */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * read transfers at most count bytes from file into buf. It</span><br><span class="hljs-comment">     * begins reading from the file at pos bytes into the file. On</span><br><span class="hljs-comment">     * success, it returns the number of bytes transferred, or 0 if the</span><br><span class="hljs-comment">     * end of the file has been reached (pos &gt;= file-&gt;vn_len).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ssize_t</span> (*read)(<span class="hljs-keyword">struct</span> vnode *file, <span class="hljs-type">size_t</span> pos, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> count);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * write transfers count bytes from buf into file. It begins</span><br><span class="hljs-comment">     * writing at pos bytes into the file. If offset+count extends</span><br><span class="hljs-comment">     * past the end of the file, the file&#x27;s length will be increased.</span><br><span class="hljs-comment">     * If offset is before the end of the file, the existing data is</span><br><span class="hljs-comment">     * overwritten. On success, it returns the number of bytes</span><br><span class="hljs-comment">     * transferred.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ssize_t</span> (*write)(<span class="hljs-keyword">struct</span> vnode *file, <span class="hljs-type">size_t</span> pos, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *buf,<br>                     <span class="hljs-type">size_t</span> count);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Implementations should supply an mobj through the &quot;ret&quot;</span><br><span class="hljs-comment">     * argument (not by setting vma-&gt;vma_obj). If for any reason</span><br><span class="hljs-comment">     * this cannot be done an appropriate error code should be</span><br><span class="hljs-comment">     * returned instead.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*mmap)(<span class="hljs-keyword">struct</span> vnode *file, <span class="hljs-keyword">struct</span> mobj **ret);<br><br>    <span class="hljs-comment">/* Operations that can be performed on directory files: */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * mknod creates a special specified by name and namelen in the</span><br><span class="hljs-comment">     * directory pointed to by dir with the specified mode and devid.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * Upon success, ret must point to the newly created file.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*mknod)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen, <span class="hljs-type">int</span> mode,<br>                  <span class="hljs-type">devid_t</span> devid, <span class="hljs-keyword">struct</span> vnode **ret);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * lookup attempts to find the file specified by name and namelen in the</span><br><span class="hljs-comment">     * directory pointed to by dir.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * Upon success, ret must point to the child vnode.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*lookup)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen,<br>                   <span class="hljs-keyword">struct</span> vnode **out);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Creates a directory entry in dir specified by name and namelen pointing</span><br><span class="hljs-comment">     * to the inode of target.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*link)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen,<br>                 <span class="hljs-keyword">struct</span> vnode *target);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * unlink removes the directory entry in dir corresponding to the file</span><br><span class="hljs-comment">     * specified by name and namelen.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*unlink)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * rename</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*rename)(<span class="hljs-keyword">struct</span> vnode *olddir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *oldname, <span class="hljs-type">size_t</span> oldnamelen,<br>                   <span class="hljs-keyword">struct</span> vnode *newdir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *newname,<br>                   <span class="hljs-type">size_t</span> newnamelen);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * mkdir creates a directory specified by name and namelen in the</span><br><span class="hljs-comment">     * directory pointed to by out.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * Upon success, out must point to the newly created directory.</span><br><span class="hljs-comment">     * Upon failure, out must be unchanged.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*mkdir)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen,<br>                  <span class="hljs-keyword">struct</span> vnode **out);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * rmdir removes the directory specified by name and namelen from dir.</span><br><span class="hljs-comment">     * The directory to be removed must be empty: the only directory entries</span><br><span class="hljs-comment">     * must be &quot;.&quot; and &quot;..&quot;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*rmdir)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">size_t</span> namelen);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * readdir reads one directory entry from the dir into the struct</span><br><span class="hljs-comment">     * dirent. On success, it returns the amount that offset should be</span><br><span class="hljs-comment">     * increased by to obtain the next directory entry with a</span><br><span class="hljs-comment">     * subsequent call to readdir. If the end of the file as been</span><br><span class="hljs-comment">     * reached (offset == file-&gt;vn_len), no directory entry will be</span><br><span class="hljs-comment">     * read and 0 will be returned.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ssize_t</span> (*readdir)(<span class="hljs-keyword">struct</span> vnode *dir, <span class="hljs-type">size_t</span> pos, <span class="hljs-keyword">struct</span> dirent *d);<br><br>    <span class="hljs-comment">/* Operations that can be performed on any type of &quot;file&quot; (</span><br><span class="hljs-comment">     * includes normal file, directory, block/byte device */</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * stat sets the fields in the given buf, filling it with</span><br><span class="hljs-comment">     * information about file.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*stat)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-keyword">struct</span> stat *buf);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * acquire is called on a vnode when a file takes its first</span><br><span class="hljs-comment">     * reference to the vnode. The file is passed in.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*acquire)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-keyword">struct</span> file *file);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * release is called on a vnode when the refcount of a file</span><br><span class="hljs-comment">     * descriptor that has it open comes down to 0. Each call to</span><br><span class="hljs-comment">     * acquire has exactly one matching call to release with the</span><br><span class="hljs-comment">     * same file that was passed to acquire.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*release)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-keyword">struct</span> file *file);<br><br>    <span class="hljs-type">long</span> (*get_pframe)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-type">size_t</span> pagenum, <span class="hljs-type">long</span> forwrite,<br>                       <span class="hljs-type">pframe_t</span> **pfp);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Read the page of &#x27;vnode&#x27; containing &#x27;offset&#x27; into the</span><br><span class="hljs-comment">     * page-aligned and page-sized buffer pointed to by</span><br><span class="hljs-comment">     * &#x27;buf&#x27;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*fill_pframe)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-type">pframe_t</span> *pf);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Write the contents of the page-aligned and page-sized</span><br><span class="hljs-comment">     * buffer pointed to by &#x27;buf&#x27; to the page of &#x27;vnode&#x27;</span><br><span class="hljs-comment">     * containing &#x27;offset&#x27;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> (*flush_pframe)(<span class="hljs-keyword">struct</span> vnode *vnode, <span class="hljs-type">pframe_t</span> *pf);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * This will truncate the file to have a length of zero</span><br><span class="hljs-comment">    * Should only be used on regular files, not directories. </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">void</span> (*truncate_file)(<span class="hljs-keyword">struct</span> vnode *vnode);<br>&#125; <span class="hljs-type">vnode_ops_t</span>;<br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Function pointers to the implementations of file operations (the</span><br><span class="hljs-comment">     * functions are provided by the filesystem implementation).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode_ops</span> *<span class="hljs-title">vn_ops</span>;</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The filesystem to which this vnode belongs. This is initialized by</span><br><span class="hljs-comment">     * the VFS subsystem when the vnode is first created and should never</span><br><span class="hljs-comment">     * change.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs</span> *<span class="hljs-title">vn_fs</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __MOUNTING__</span><br>    <span class="hljs-comment">/* This field is used only for implementing mount points (not required) */</span><br>    <span class="hljs-comment">/* This field points the the root of the file system mounted at</span><br><span class="hljs-comment">     * this vnode. If no file system is mounted at this point this is a</span><br><span class="hljs-comment">     * self pointer (i.e. vn-&gt;vn_mount = vn). See vget for why this is</span><br><span class="hljs-comment">     * makes things easier for us. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span> *<span class="hljs-title">vn_mount</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The object responsible for managing the memory where pages read</span><br><span class="hljs-comment">     * from this file reside. The VFS subsystem may use this field, but it</span><br><span class="hljs-comment">     * does not need to create it.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mobj</span> <span class="hljs-title">vn_mobj</span>;</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * A number which uniquely identifies this vnode within its filesystem.</span><br><span class="hljs-comment">     * (Similar and usually identical to what you might know as the inode</span><br><span class="hljs-comment">     * number of a file).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ino_t</span> vn_vno;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * File type. See stat.h.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> vn_mode;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Length of file. Initialized at the fs-implementation-level (in the</span><br><span class="hljs-comment">     * &#x27;read_vnode&#x27; fs_t entry point). Maintained at the filesystem</span><br><span class="hljs-comment">     * implementation level (within the implementations of relevant vnode</span><br><span class="hljs-comment">     * entry points).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">size_t</span> vn_len;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * A generic pointer which the file system can use to store any extra</span><br><span class="hljs-comment">     * data it needs.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">void</span> *vn_i;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The device identifier.</span><br><span class="hljs-comment">     * Only relevant to vnodes representing device files.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">devid_t</span> vn_devid;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The state of the vnode. Can either be loading or loaded. The vnode</span><br><span class="hljs-comment">     * cannot be used until the vnode is in the loaded state. Potential</span><br><span class="hljs-comment">     * users should wait on `vn_waitq` if the vnode is being loaded.</span><br><span class="hljs-comment">     * This field is protected by the &#x27;vn_state_lock&#x27;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> vn_state;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Protects the `vn_state` field.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">spinlock_t</span> vn_state_lock;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Allows vnode users to wait on the vnode, until the vnode is ready.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ktqueue_t</span> vn_waitq;<br><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-type">chardev_t</span> *chardev;<br>        <span class="hljs-type">blockdev_t</span> *blockdev;<br>    &#125; vn_dev;<br><br>    <span class="hljs-comment">/* Used (only) by the v&#123;get,ref,put&#125; facilities (vfs/vnode.c): */</span><br>    <span class="hljs-type">list_link_t</span> vn_link; <span class="hljs-comment">/* link on system vnode list */</span><br>&#125; <span class="hljs-type">vnode_t</span>;<br><br><span class="hljs-comment">/* similar to Linux&#x27;s super_block. */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The string name of the device from which this file system should</span><br><span class="hljs-comment">     * be mounted. This may be used by the mount function of some file</span><br><span class="hljs-comment">     * systems which need to know which device they are mounting.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span> fs_dev[STR_MAX];<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The type of file system this structure represents (given as a</span><br><span class="hljs-comment">     * well-defined string). This is used by the generic VFS mount</span><br><span class="hljs-comment">     * function to decide which filesystem-specific mount function to</span><br><span class="hljs-comment">     * call.  Valid values are hard-coded in vfs.c.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">char</span> fs_type[STR_MAX];<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __MOUNTING__</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If mounting is implemented then this should point to the vnode</span><br><span class="hljs-comment">     * of the file that this file system is mounted on. For the root file</span><br><span class="hljs-comment">     * system this will just point to the root of that file system.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span> *<span class="hljs-title">fs_mtpt</span>;</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * An identifier for the mounted file system. This should be enlisted</span><br><span class="hljs-comment">     * by the the kernel to keep track of all mounted file systems.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">list_link_t</span> fs_link;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The following members are initialized by the filesystem</span><br><span class="hljs-comment">     * implementation&#x27;s mount routine:</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The struct of operations that define which filesystem-specific</span><br><span class="hljs-comment">     * functions to call to perform filesystem manipulation.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">fs_ops_t</span> *fs_ops;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * The root vnode for this filesystem (not to be confused with</span><br><span class="hljs-comment">     * either / (the root of VFS) or the vnode where the filesystem is</span><br><span class="hljs-comment">     * mounted, which is on a different file system.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vnode</span> *<span class="hljs-title">fs_root</span>;</span><br><br>    <span class="hljs-comment">/* Filesystem-specific data. */</span><br>    <span class="hljs-type">void</span> *fs_i;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">slab_allocator</span> *<span class="hljs-title">fs_vnode_allocator</span>;</span><br>    <span class="hljs-type">list_t</span> vnode_list;<br>    <span class="hljs-type">kmutex_t</span> vnode_list_mutex;<br>    <span class="hljs-type">kmutex_t</span> vnode_rename_mutex;<br><br>&#125; <span class="hljs-type">fs_t</span>;<br></code></pre></td></tr></table></figure><p>上面的结构代表的是<code>vfs</code>中的公共结构，而实现<code>多态性</code>的关键在于将不同文件系统的<code>私有数据</code>嵌入到上述的公共结构中，如<code>vnode</code>的<code>vn_i</code>字段代表的是特定文件系统的<code>inode</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>operating system, filesystem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中断</title>
    <link href="/2024/09/11/%E4%B8%AD%E6%96%AD/"/>
    <url>/2024/09/11/%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7">中断</a>是构成操作系统的一个非常重要的概念，它主要应用在调度、同步、驱动程序等操作系统的重要组成部分。本篇文章主要包括我本人在学习操作系统时对中断的理解。</p><h1 id="中断究竟是什么？"><a href="#中断究竟是什么？" class="headerlink" title="中断究竟是什么？"></a>中断究竟是什么？</h1><p>中断从概念上来讲，它的作用是打断当前执行流的执行，转而去执行一个预先设定的另一个执行流（称为中断处理程序）。那如果从计算机执行指令的方向去看的话，其实中断的行为其实只是改变了指令寄存器的值（在x86-64架构上为<code>rip</code>寄存器）。从程序的执行方面去看的话，因为程序的执行其实是一连续的函数调用，而函数调用在底层的机器语言上是一条<code>call</code>指令，<code>call</code>指令在行为上其实是做了一个压栈操作和改变<code>rip</code>寄存器值的组合。那也是说从指令执行的层面，中断其实在行为上是和函数调用非常类似的。</p><p>TODO：添加关于中断和函数调用的图示</p><h1 id="中断和函数调用的区别"><a href="#中断和函数调用的区别" class="headerlink" title="中断和函数调用的区别"></a>中断和函数调用的区别</h1><p>中断和函数调用的主要区别在与执行流的可预测性，对于函数调用而言，当内层函数返回时，我们一定知道它会返回到上层函数。对于中断而言，当中断返回时，并不确定一定会返回到被中断的函数（可能在内核中经历了一次<code>schedule</code>）。另外一个比较重要的区别是，在发生中断时，由<code>CPU</code>进行了一次切换栈的操作，也就是中断处理程序是在另外一个栈运行的。这也衍生出了一些问题？</p><ol><li>为什么需要切换栈？（为什么不继续使用用户栈？）</li></ol><p>既然中断和函数调用的行为有很多的相似之处，那么中断的执行需要栈来保存上下文信息。为什么不能在原来的用户栈上继续执行？</p><ul><li>用户栈不可信，作为操作系统必须假设用户程序是‘危险’的，即如果允许使用用户栈来保存中断的上下文信息，是不安全的。操作系统必须隔离不同的用户程序，保证用户程序崩溃不会影响到整个系统的运行。</li><li>用户栈大小的限制，用户栈通常设置在$8KB$的大小，在中断执行的过程，可能会复写对于用户程序很重要的数据。</li><li>安全性考虑，内核在执行中断的过程中，可能会在栈上遗留下一些敏感性数据（<code>POP</code>不会删除栈上的信息）</li></ul><ol start="2"><li>由CPU切换的栈是属于‘谁’的？CPU怎么知道切换到这个指定的栈？</li></ol><p>中断处理切换栈的操作是和处理器相关的，我主要讲一下主流的<code>x86</code>架构。</p><ol><li>进程的内核栈</li><li>与核相绑定的中断栈 （Linux的选择）</li></ol><p>在切换线程时，如果这个线程存在用户上下文（TODO：需要查看源码），在进行上下文切换之后，返回用户态之前，内核设置<a href="https://en.wikipedia.org/wiki/Task_state_segment"><code>TSS</code></a>（x86）的值为栈的地址。在下次中断发生的时候，处理器会自动根据<code>TSS</code>切换栈。</p><p>TODO：增加一些引用说明证明其中的文字</p>]]></content>
    
    
    
    <tags>
      
      <tag>operating system</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
