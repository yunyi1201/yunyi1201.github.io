<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>中断</title>
    <link href="/2024/09/11/%E4%B8%AD%E6%96%AD/"/>
    <url>/2024/09/11/%E4%B8%AD%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7">中断</a>是构成操作系统的一个非常重要的概念，它主要应用在调度、同步、驱动程序等操作系统的重要组成部分。本篇文章主要包括我本人在学习操作系统时对中断的理解。</p><h1 id="中断究竟是什么？"><a href="#中断究竟是什么？" class="headerlink" title="中断究竟是什么？"></a>中断究竟是什么？</h1><p>中断从概念上来讲，它的作用是打断当前执行流的执行，转而去执行一个预先设定的另一个执行流（称为中断处理程序）。那如果从计算机执行指令的方向去看的话，其实中断的行为其实只是改变了指令寄存器的值（在x86-64架构上为<code>rip</code>寄存器）。从程序的执行方面去看的话，因为程序的执行其实是一连续的函数调用，而函数调用在底层的机器语言上是一条<code>call</code>指令，<code>call</code>指令在行为上其实是做了一个压栈操作和改变<code>rip</code>寄存器值的组合。那也是说从指令执行的层面，中断其实在行为上是和函数调用非常类似的。</p><p>TODO：添加关于中断和函数调用的图示</p><h1 id="中断和函数调用的区别"><a href="#中断和函数调用的区别" class="headerlink" title="中断和函数调用的区别"></a>中断和函数调用的区别</h1><p>中断和函数调用的主要区别在与执行流的可预测性，对于函数调用而言，当内层函数返回时，我们一定知道它会返回到上层函数。对于中断而言，当中断返回时，并不确定一定会返回到被中断的函数（可能在内核中经历了一次<code>schedule</code>）。另外一个比较重要的区别是，在发生中断时，由<code>CPU</code>进行了一次切换栈的操作，也就是中断处理程序是在另外一个栈运行的。这也衍生出了一些问题？</p><ol><li>为什么需要切换栈？（为什么不继续使用用户栈？）</li></ol><p>既然中断和函数调用的行为有很多的相似之处，那么中断的执行需要栈来保存上下文信息。为什么不能在原来的用户栈上继续执行？</p><ul><li>用户栈不可信，作为操作系统必须假设用户程序是‘危险’的，即如果允许使用用户栈来保存中断的上下文信息，是不安全的。操作系统必须隔离不同的用户程序，保证用户程序崩溃不会影响到整个系统的运行。</li><li>用户栈大小的限制，用户栈通常设置在$8KB$的大小，在中断执行的过程，可能会复写对于用户程序很重要的数据。</li><li>安全性考虑，内核在执行中断的过程中，可能会在栈上遗留下一些敏感性数据（<code>POP</code>不会删除栈上的信息）</li></ul><ol start="2"><li>由CPU切换的栈是属于‘谁’的？CPU怎么知道切换到这个指定的栈？</li></ol><p>中断处理切换栈的操作是和处理器相关的，我主要讲一下主流的<code>x86</code>架构。</p><ol><li>进程的内核栈</li><li>与核相绑定的中断栈 （Linux的选择）</li></ol><p>在切换线程时，如果这个线程存在用户上下文（TODO：需要查看源码），在进行上下文切换之后，返回用户态之前，内核设置<a href="https://en.wikipedia.org/wiki/Task_state_segment"><code>TSS</code></a>（x86）的值为栈的地址。在下次中断发生的时候，处理器会自动根据<code>TSS</code>切换栈。</p><p>TODO：增加一些引用说明证明其中的文字</p>]]></content>
    
    
    
    <tags>
      
      <tag>operating system</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
